//
`timescale 1ms/1ms
module pingpang (clk,rst,play1,play2,light,sum1,sum2);
input clk,rst;
input play1,play2;
//
output [15:0]light;
output [3:0]sum1,sum2;
//
wire clk,rst;
wire play1,play2;
//
reg [15:0]light;
reg [3:0]sum1,sum2;
//
reg [5:0]cnt1,cnt2;

always @ (posedge clk or negedge rst)
if (!rst)
   cnt1<=0;
else if (clk) 
   begin 
	if(cnt1>6'b100111)
	cnt1<=0;
	else 
	cnt1<=cnt1+1'b1;
	end 
//
always @ (posedge clk or negedge rst)
if (!rst)
   cnt2<=0;
else if (clk) 
   begin 
	if(cnt1>7'b1001111)
	cnt2<=0;
	else 
	cnt2<=cnt2+1'b1;
	end 
//
parameter 
s_0=4'b0000,
s_1=4'b0001,	
s_2=4'b0010,
s_3=4'b0011,
s_4=4'b0100,
s_5=4'b0101,
s_6=4'b0110,
s_7=4'b0111,
s_8=4'b1000,
s_9=4'b1001,
s_10=4'b1010;

reg [3:0]curr_st,next_st;
//
always @ (posedge clk or negedge rst)
if (!rst)
   begin 
	next_st<=s_0;
	sum1<=0;
	sum2<=0;
	light<=16'b0000 0000 0000 0000;
	end 
else case(curr_st)
s_0:begin
   light<=16'b1000 0000 0000 0001;
	if(play1)
   next_st<=s_1;
   else if (play2)
   next_st<=s_8;
   else next_st<=s_0;
   end 
s_1:begin 
   light<=16'b0000 0000 0000 0001;
   next_st<=s_2;
   end 
s_2:if(cnt1==6'b10 0111)
   light<=(light<<1);
    else if(light==16'b0000 0000 0000 1000)
	next_st<=s_3;
    else next_st<=s_2;
s_3:if(cnt2==7'b100 1111)
   light<=(light<<1);
	else if (light==16'b0000 1000 0000 000//0)
	next_st<=s_4;
	else next_st<=s_3;
s_4:if(cnt1==6'b10 0111)
   light<=(light<<1);
	else if(light<=16'b1000 0000 0000 0000)
	begin 
	next_st <=s_4;
	if (light<16'b1000 0000 0000 0000&&play2)
	next_st<=s_5;
	else if (light==16'b1000 0000 0000 0000)
	next_st<=s_9;
	end 
s_5:if(cnt1==6'b10 0111)
   light<=(light>>1);
	else if (light==16'b0001 0000 0000 0000)
	next_st<=s_6;
	else next_st=s_5;
s_6:if(cnt2==7'b100 1111)
   light<=(light>>1);
	else if(light==16'b0000 0000 0001 0000)
	next_st<=s_7;
	else next_st<=s_6;
s_7:if(cnt1==6'b10 01111)
   light<=(light>>1);
	else if (light>=16'b0000 0000 0000 0001)
	begin 
	next_st<=s_7;
	if(light>16'b0000 0000 0000 0001&&play1)
	next_st<=s_2;
	else if (light==16'b0000 0000 0000 0001)
	next_st<=s_10;
	end 
s_8:begin 
   light<=16'b1000 0000 0000 0000;
	next_st<=s_5;
	end 
s_9:begin
   sum1<=sum1+1'b1;
	next_st<=s_0;
	end 
s_10:begin 
   sum2<=sum2+1'b1;
	next_st<=s_0;
	end 
endcase 
//
always@(posedge clk or negedge rst)
if(!rst)
curr_st<=s_0;
else 
curr_st<=next_st;
endmodule 
//记分显示模块
`timescale 1ms/1ms
module jifenqi(clk,rst,sum1,sum2,led,sel);
input clk,rst;
input [3:0]sum1,sum2;
output [6:0]led;
output [2:0]sel;
//
wire clk,rst;
wire [3:0]sum1,sum2;
reg [6:0]led;
//
reg [6:0]led_p11,led_p12,led_p21,led_p22;
reg [6:0]led_j1,led_j2;
reg [2:0]jushu_p1,jushu_p2;
//
reg [2:0]sel;
reg [2:0]cnt;
//
always@(posedge clk or negedge rst)
if (!rst)
cnt<=0;
else 
cnt<=cnt+1'b1;
//
always @(cnt)
case(cnt)
3'b000:sel<=3'b000;
3'b001:sel<=3'b001;
3'b010:sel<=3'b010;
3'b011:sel<=3'b011;
3'b100:sel<=3'b100;
3'b101:sel<=3'b101;
3'b110:sel<=3'b110;
3'b111:sel<=3'b111;	
endcase 
//
always@(sum1)
case (sum1)
4'b0000:
begin
led_p11<=7'b100 0000;
led_p12<=7'b100 0000;
end 
4'b0001:
begin
led_p11<=7'b111 1001;
led_p12<=7'b100 0000;
end 
4'b0010:
begin
led_p11<=7'b010 0100;
led_p12<=7'b100 0000;
end 
4'b0011:
begin
led_p11<=7'b011 0000;
led_p12<=7'b100 0000;
end 	
4'b0100:
begin
led_p11<=7'b001 1001;
led_p12<=7'b100 0000;
end 	
4'b0101:
begin
led_p11<=7'b001 0010;
led_p12<=7'b100 0000;
end 	
4'b0110:
begin
led_p11<=7'b000 0010;
led_p12<=7'b100 0000;
end 	
4'b0111:
begin
led_p11<=7'b111 1000;
led_p12<=7'b100 0000;
end 	
4'b1000:
begin
led_p11<=7'b000 0000;
led_p12<=7'b100 0000;
end 	
4'b1001:
begin
led_p11<=7'b001 0000;
led_p12<=7'b100 0000;
end 
4'b1010:
begin
led_p11<=7'b100 0000;
led_p12<=7'b111 1001;
end 	
4'b1011:
begin
led_p11<=7'b111 1001;
led_p12<=7'b111 1001;
end 	
4'b1100:
begin
led_p11<=7'b010 0100;
led_p12<=7'b111 1001;
end 
4'b1101:
begin
led_p11<=7'b011 0000;
led_p12<=7'b111 1001;
end 		
4'b1110:
begin
led_p11<=7'b001 1001;
led_p12<=7'b111 1001;
end 		
4'b1111:
begin
led_p11<=7'b001 0010;
led_p12<=7'b111 1001;
end 		
endcase 
//
always@(sum2)
case(sum2)
4'b0000:
begin
led_p21<=7'b100 0000;
led_p22<=7'b100 0000;
end 
4'b0001:
begin
led_p21<=7'b111 1001;
led_p22<=7'b100 0000;
end 
4'b0010:
begin
led_p21<=7'b010 0100;
led_p22<=7'b100 0000;
end 
4'b0011:
begin
led_p21<=7'b011 0000;
led_p22<=7'b100 0000;
end 	
4'b0100:
begin
led_p21<=7'b001 1001;
led_p22<=7'b100 0000;
end 	
4'b0101:
begin
led_p21<=7'b001 0010;
led_p22<=7'b100 0000;
end 	
4'b0110:
begin
led_p21<=7'b000 0010;
led_p22<=7'b100 0000;
end 	
4'b0111:
begin
led_p21<=7'b111 1000;
led_p22<=7'b100 0000;
end 	
4'b1000:
begin
led_p21<=7'b000 0000;
led_p22<=7'b100 0000;
end 	
4'b1001:
begin
led_p21<=7'b001 0000;
led_p22<=7'b100 0000;
end 
4'b1010:
begin
led_p21<=7'b100 0000;
led_p22<=7'b111 1001;
end 	
4'b1011:
begin
led_p21<=7'b111 1001;
led_p22<=7'b111 1001;
end 	
4'b1100:
begin
led_p21<=7'b010 0100;
led_p22<=7'b111 1001;
end 
4'b1101:
begin
led_p21<=7'b011 0000;
led_p22<=7'b111 1001;
end 		
4'b1110:
begin
led_p21<=7'b001 1001;
led_p22<=7'b111 1001;
end 		
4'b1111:
begin
led_p21<=7'b001 0010;
led_p22<=7'b111 1001;
end 		
endcase 
//	
always@ (posedge clk or negedge rst)
if (!rst)
begin 
jushu_p1<=0;
jushu_p2<=0;
end
else if (sum1==4'b1011&sum2<4'b1001)
jushu_p1<=jushu_p1+1'b1;
else if (sum2==4'b1011&sum1<4'b1001)
jushu_p2<=jushu_p2+1'b1;
else if(sum1>4'b1001&sum2>4'b1001&&(sum1-sum2)>1)
jushu_p1<=jushu_p1+1'b1;
else if(sum1>4'b1001&sum2>4'b1001&&(sum2-sum1)>1)
jushu_p2<=jushu_p2+1'b1;
//
always@(posedge clk)
case (jushu_p1)
3'b000:led_j1<=7'b100 0000;
3'b001:led_j1<=7'b111 1001;
3'b010:led_j1<=7'b010 0100;
3'b011:led_j1<=7'b011 0000;
3'b100:led_j1<=7'b001 1001;
endcase 
//
always@(posedge clk)
case (jushu_p2)
3'b000:led_j2<=7'b100 0000;
3'b001:led_j2<=7'b111 1001;
3'b010:led_j2<=7'b010 0100;
3'b011:led_j2<=7'b011 0000;
3'b100:led_j2<=7'b001 1001;
endcase 
//
always@(posedge clk)
case (sel)
3'b000:led<=led_j1;
3'b001:led<=led_j2;
3'b010:led<=0;
3'b011:led<=led_p11;
3'b100:led<=led_p12;
3'b101:led<=0;
3'b110:led<=led_p21;
3'b111:led<=led_p22;
endcase

endmodule

	
